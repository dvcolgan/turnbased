// Generated by CoffeeScript 1.6.3
var CreateAccountController, GameController, PlayController, gameApp, randomChoice;

gameApp = angular.module('gameApp', []);

gameApp.config(function($routeProvider) {
  $routeProvider.when('/board/:centerX/:centerY/', {
    templateUrl: 'partials/play.html',
    controller: 'PlayController'
  });
  return $routeProvider.otherwise({
    redirectTo: '/board/0/0/'
  });
});

gameApp.config(function($httpProvider) {
  return $httpProvider.defaults.headers.post['X-CSRFToken'] = $('input[name=csrfmiddlewaretoken]').val();
});

gameApp.config(function($interpolateProvider) {
  return $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});

gameApp.directive('blur', function() {
  return function(scope, element, attrs) {
    return element.bind('blur', function() {
      return scope.$apply(attrs.blur);
    });
  };
});

gameApp.directive('valueMatches', function() {
  return {
    require: "ngModel",
    scope: {
      valueMatches: '='
    },
    link: function(scope, element, attrs, ctrl) {
      return scope.$watch((function() {
        var combined;
        combined = null;
        if (scope.valueMatches && ctrl.$viewValue) {
          combined = scope.valueMatches + '_' + ctrl.$viewValue;
        }
        return combined;
      }), (function(value) {
        if (value) {
          return ctrl.$parsers.unshift(function(viewValue) {
            var origin;
            origin = scope.valueMatches;
            if (origin !== viewValue) {
              ctrl.$setValidity("valueMatches", false);
              return void 0;
            } else {
              ctrl.$setValidity("valueMatches", true);
              return viewValue;
            }
          });
        }
      }));
    }
  };
});

gameApp.directive('uniqueUsername', function($http, $compile) {
  return {
    require: 'ngModel',
    restrict: 'A',
    link: function(scope, element, attrs, ctrl) {
      return ctrl.$parsers.push(function(viewValue) {
        if (viewValue) {
          $http.get('/api/account/exists/username/' + viewValue + '/').success(function(data, status, headers, config) {
            console.log('here');
            if (data.taken) {
              return ctrl.$setValidity('unique', false);
            } else {
              return ctrl.$setValidity('unique', true);
            }
          }).error(function(data, status, headers, config) {
            return alert('could not connect to server');
          });
        }
        return viewValue;
      });
    }
  };
});

gameApp.factory('Data', function() {
  return {
    world_names: ['Atlantis', 'Azeroth', 'Camelot', 'Narnia', 'Hyrule', 'Middle-earth', 'The Neverhood', 'Rapture', 'Terabithia', 'Kanto', 'The Grand Line', 'Tatooine', 'Naboo', 'Pandora', 'Corneria', 'Termina', 'Xen', 'City 17', 'Tokyo', 'Ithica', 'Peru'],
    player_names: [['Frodo Baggins', 'Shire Hobbits'], ['Elrond', 'Mirkwood Elves'], ['Durin Darkhammer', 'Moria Dwarves'], ['Ness', 'Eagleland'], ['Daphnes Nohansen Hyrule', 'Hylians'], ['Aragorn son of Arathorn', 'Gondorians'], ['Strong Bad', 'Strongbadia'], ['Captain Homestar', 'The Team'], ['T-Rex', 'Dinosaurs'], ['Refrigerator', 'Kitchen Appliances'], ['The Burger King', 'Fast Foodies'], ['Larry King Live', 'Interviewees'], ['King', 'Mimigas'], ['Luke Skywalker', 'The Rebel Alliance'], ['Darth Vader', 'The Empire'], ['Jean-Luc Picard', 'The Enterprise'], ['The Borg Queen', 'The Borg'], ['Bowser', 'Koopas']]
  };
});

randomChoice = function(collection) {
  return collection[Math.floor(Math.random() * collection.length)];
};

CreateAccountController = function($scope, $http, $location) {
  $scope.newAccount = {
    username: '',
    password: '',
    password2: ''
  };
  return $scope.submit = function() {
    return $http.post('/api/account/', $scope.newAccount).success(function(data, status, headers, config) {
      return $location.path('/play/');
    }).error(function(data, status, headers, config) {
      return alert(data.error);
    });
  };
};

GameController = function($scope, Data) {
  $scope.data = Data;
  $scope.world_name = '';
  $scope.leader_name = '';
  $scope.people_name = '';
  $scope.getRandomWorldName = function() {
    return $scope.world_name = randomChoice($scope.data.world_names);
  };
  return $scope.getRandomCivName = function() {
    var names;
    names = randomChoice($scope.data.player_names);
    $scope.leader_name = names[0];
    return $scope.people_name = names[1];
  };
};

PlayController = function($scope, $http, $timeout, $routeParams) {
  $scope.getViewWidth = function() {
    return Math.floor((angular.element(window).width() - (48 + 20)) / 48);
  };
  $scope.getViewHeight = function() {
    angular.element(window).height();
    return Math.floor((angular.element(window).height() - 220.) / 48);
  };
  $scope.fetchBoard = function(centerX, centerY) {
    return $http.get('/api/sector/' + centerX + '/' + centerY + '/' + $scope.getViewWidth() + '/' + $scope.getViewHeight() + '/').success(function(data, status, headers, config) {
      var square, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results, _results1;
      $scope.data = data;
      $scope.centerX = parseInt(centerX);
      $scope.centerY = parseInt(centerY);
      _ref = $scope.data.squares;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        square = _ref[_i];
        square.left = ((square.x - ($scope.centerX - data.view_width / 2)) * 48) + 'px';
        square.top = ((square.y - ($scope.centerY - data.view_height / 2)) * 48) + 'px';
      }
      $scope.topCoords = (function() {
        _results = [];
        for (var _j = _ref1 = $scope.centerX - data.view_width / 2, _ref2 = $scope.centerX + data.view_width / 2; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; _ref1 <= _ref2 ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this);
      $scope.sideCoords = (function() {
        _results1 = [];
        for (var _k = _ref3 = $scope.centerY - data.view_height / 2, _ref4 = $scope.centerY + data.view_height / 2; _ref3 <= _ref4 ? _k < _ref4 : _k > _ref4; _ref3 <= _ref4 ? _k++ : _k--){ _results1.push(_k); }
        return _results1;
      }).apply(this);
      $scope.data.board_width = ($scope.data.view_width * 48) + 'px';
      $scope.data.board_height = ($scope.data.view_height * 48) + 'px';
      return $scope.unitsRemaining = data.remaining_counts;
    }).error(function(data, status, headers, config) {
      return alert(data.error);
    });
  };
  $scope.fetchBoard($routeParams.centerX, $routeParams.centerY);
  $scope.findSquare = function(x, y) {
    var square, _i, _len, _ref;
    _ref = $scope.data.squares;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      square = _ref[_i];
      if (square.x === x && square.y === y) {
        return square;
      }
    }
    throw 'Square not loaded';
  };
  $scope.modifyUnit = function(square, action) {
    var square8, squares1, squares2, squares4;
    if (action === 'initial') {
      square8 = square;
      squares4 = [$scope.findSquare(square.x - 1, square.y), $scope.findSquare(square.x + 1, square.y), $scope.findSquare(square.x, square.y - 1), $scope.findSquare(square.x, square.y + 1)];
      squares2 = [$scope.findSquare(square.x - 1, square.y - 1), $scope.findSquare(square.x + 1, square.y + 1), $scope.findSquare(square.x + 1, square.y - 1), $scope.findSquare(square.x - 1, square.y + 1)];
      squares1 = [$scope.findSquare(square.x - 1, square.y - 1), $scope.findSquare(square.x + 1, square.y + 1), $scope.findSquare(square.x + 1, square.y - 1), $scope.findSquare(square.x - 1, square.y + 1)];
      return $http.post('/api/square/' + square.x + '/' + square.y + '/' + action + '/', {
        action: action
      }).success(function(data, status, headers, config) {}).error(function(data, status, headers, config) {});
    } else {
      return $http.post('/api/square/' + square.x + '/' + square.y + '/' + action + '/', {
        action: action
      }).success(function(data, status, headers, config) {
        var found, i, remaining, unit, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _results;
        if (action === 'place') {
          found = false;
          _ref = square.units;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            unit = _ref[_i];
            if (unit.color === data.unit.color) {
              unit.amount = data.unit.amount;
              found = true;
              break;
            }
          }
          if (!found) {
            square.units.push(data.unit);
          }
        } else if (action === 'remove') {
          for (i = _j = 0, _ref1 = square.units.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            if (square.units[i].color === $scope.currentColor) {
              if (data.amount === 0) {
                square.units.splice(i, 1);
              } else {
                square.units[i].amount = data.amount;
              }
              break;
            }
          }
        }
        _ref2 = $scope.unitsRemaining;
        _results = [];
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          remaining = _ref2[_k];
          if (remaining.color === $scope.currentColor) {
            remaining.remaining = data.units_remaining;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).error(function(data, status, headers, config) {
        return alert(data.error);
      });
    }
  };
  $scope.currentColor = 'blue';
  return $scope.unitAction = 'place';
};
